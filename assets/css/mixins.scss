@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

$baseWindowWidths: 1919, 1599, 1279, 1023, 767, 479, 319;
@function number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    @error ('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return length(if($minus, -$result, $result), str-slice($value, $i))
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}

@mixin scale($param,$listValues,$setCeil: true,$setFloor:true,$string : "{1}",$withoutCalc: false) {
  @debug "------"+$param;
  @debug "length($listValues):"+length($listValues);
  @debug "$listValues:"+$listValues;
  @for $i from 1 to (length($listValues)+1) {
    //итерируемый элемент
    $thisMultipleValue: nth($listValues, $i);
    @if ($thisMultipleValue != "") {
      @if (type-of($thisMultipleValue) != list) {
        $thisValue: [$thisMultipleValue];
      }
      $thisWindowWidth: nth($baseWindowWidths, $i);
      $result: $string;
      @for $j from 1 to (length($thisMultipleValue)+1) {
        $thisValue: nth($thisMultipleValue, $j);
        $nextValue: $thisValue;
        $value: "";
        @if (type-of($thisValue) != "number") {
          $value: $thisValue;
        } @else if ($i == length($listValues)) {
          $value: "#{$thisValue} * (100vw / #{$thisWindowWidth})";
        } @else {
          $nextI: $i + 1;
          $nextValue: "";
          @while ($nextValue == "" and $nextI <= length($listValues)) {
            $nextValue: nth($listValues, $nextI);
            @debug $nextValue + " " + type-of($nextValue);
            @debug $nextI;
            @if (type-of($nextValue) == "list") {
              $nextValue: nth($nextValue, $j);
            }
            $nextI: $nextI + 1;
          }
          @debug $nextValue + " " + type-of($nextValue);
          @if (type-of($nextValue) == "string" and $nextValue != "") {
            $value: $nextValue;
          } @else if ($nextValue != "" and type-of($nextValue) == "number") {
            $thisValue: number(str-replace("#{$thisValue}", "px", ""));
            $nextValue: number(str-replace("#{$nextValue}", "px", ""));
            $nextWindowWidth: nth($baseWindowWidths, $i + 1);
            $value: "#{$nextValue}px + #{$thisValue - $nextValue} * ((100vw - #{$nextWindowWidth+1}px) / #{$thisWindowWidth - $nextWindowWidth})";
          } @else {
            $value: "#{$thisValue} * (100vw / #{$thisWindowWidth})";
          }
        }
        @if (type-of($thisValue) == "number") {
          @if ($withoutCalc == false and ((variable-exists(nextValue) and type-of($nextValue) != "string") or $i == length($listValues))) {
            $value: calc(#{$value});
          }
          @if ($setCeil and $i == 1) {
            @if (variable-exists(nextValue) and type-of($nextValue) == "number" and ($thisValue - $nextValue) < 0) {
              $value: max(#{$thisValue}px,#{$value});
            } @else {
              $value: min(#{$thisValue}px,#{$value});
            }
          }
          @if ($setFloor and $i == length($listValues)) {
            $value: max(#{$thisValue}px,#{$value});
          }
        }
        $result: str-replace($result, "{#{$j}}", $value);
      }
      @if ($i == 1) {
        #{$param}: #{$result};
      } @else {
        @media screen and (max-width: #{$thisWindowWidth}px) {
          #{$param}: #{$result};
        }
      }
      @debug "screen: " + $thisWindowWidth +"; $i: "+$i +"; result: "+$result;
    }
  }
}